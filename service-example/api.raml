#%RAML 0.8
title: Transaction API
version: v1
baseUri: http://bogdandm.ddns.net/{service}/api/{version}/
mediaType: application/json

documentation:
  - title: ""
    content: |
      Это API, поволяющий выпонять транзакции для REST-сервиса

schemas:
  - Error: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "code",
          "description",
          "data"
        ]
      }

traits:
  - validated:
      description: Запрос проверятся при помощи JSON-schema
      responses:
        400:
            body:
              application/json:
                description: Параметры запроса не валидны
                example: |
                  {
                    "code": 11,
                    "data": null,
                    "description": "request params is invalid"
                  }
                schema: Error

  - transaction:
      headers:
        X-Transaction:
          description: Transaction key (generated by service)
          example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

/transaction:
  post:
    is:  [validated]
    description: |
      Открытие новой транзакции. Возращает имя сервиса и ключ данной транзакции.
      \*Таймаут в мс
    body:
      schema: !include json_schemas/transaction_post.schema
      example: |
        {
          "timeout": 1000,
          "callback-url": "http://domen.net/controller/api/transaction/514c46f724e5836e00c79a93 PUT"
        }
    responses:
      200:
        body:
          example: |
            {
              "service-name": "Service 1",
              "_id": "5836dffc79a93014c46f724d",
              "transaction-key": "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824",
              "ping-timeout": 1000
            }

  /{id}:
    post:
      is: [transaction]
      description: |
        Commit. Передается ключ транзакции.
      responses:
        200:

    delete:
      is: [transaction]
      description: |
        Rollback. Передается ключ транзакции.
      responses:
        200:

    get:
      is: [transaction]
      description: |
        Ping. Должен вызываться каждые N мс. В случае задержки вызова на 2*N сервис считает соединение потерянным и происходит односторонний откат. Если сервис перестал отвечать на ping, то контроллер региструет разрыв соедениния и выполняет глобальный откат.
      responses:
        200:

/example-resourse:
  displayName: Пример
  post:
    is: [transaction]
    description: Создание произвольного объекта. При передаче заголовка транзакции ответ отправляется через медот PUT контроллера.
    responses:
      200:
        body:
          example: |
            {
              "_": "Если передан заголовок транзакции",
              "transaction": {
                "key": "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824",
                "status": "IN_PROCESS"
              }
            }
